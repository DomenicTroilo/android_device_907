From 037bbc9c01e609a65ba2cfa86edd469bed885fde Mon Sep 17 00:00:00 2001
From: dianlujitao <dianlujitao@gmail.com>
Date: Wed, 4 Jun 2014 22:19:47 +0800
Subject: [PATCH] frameworks_base

Change-Id: I7f759922b5c92f45e107fefaab84b3c2207c5f73

diff --git a/core/java/android/hardware/Camera.java b/core/java/android/hardware/Camera.java
index 0764445..12be27f 100644
--- a/core/java/android/hardware/Camera.java
+++ b/core/java/android/hardware/Camera.java
@@ -5165,4 +5165,6 @@ public class Camera {
          }
          /* ### QC ADD-ONS: END */
     };
+    // Allwinner platform - set video screen
+    public static native int setCameraScreen(int screen);
 }
diff --git a/services/java/com/android/server/WiredAccessoryManager.java b/services/java/com/android/server/WiredAccessoryManager.java
index 3c388e2..3b03194 100644
--- a/services/java/com/android/server/WiredAccessoryManager.java
+++ b/services/java/com/android/server/WiredAccessoryManager.java
@@ -86,7 +86,10 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
 
     private final boolean mUseDevInputEventForAudioJack;
 
+    private final Context mContext;
+
     public WiredAccessoryManager(Context context, InputManagerService inputManager) {
+        mContext = context;
         PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
         mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "WiredAccessoryManager");
         mWakeLock.setReferenceCounted(false);
@@ -105,6 +108,8 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
                     }
                 },
                 new IntentFilter(Intent.ACTION_BOOT_COMPLETED), null, null);
+        // Observe ALSA uevents
+        this.UsbAudioObserver.startObserving("MAJOR=116");
     }
 
     private void bootCompleted() {
@@ -463,4 +468,90 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
             }
         }
     }
+    
+    private final UEventObserver UsbAudioObserver = new UEventObserver() {
+        public void onUEvent(UEventObserver.UEvent event) {
+            if(LOG) Slog.v(WiredAccessoryManager.TAG, "USB AUDIO UEVENT: " + event.toString());
+            
+            String action = event.get("ACTION");
+            String devName = event.get("DEVNAME");
+            String devPath = event.get("DEVPATH");
+            String major = event.get("MAJOR");
+            String minor = event.get("MINOR");
+            
+            if(LOG){
+                Slog.v(WiredAccessoryManager.TAG, 
+                    "ACTION = " + action + 
+                    ", DEVNAME=" + devName + 
+                    ", MAJOR = " + major + 
+                    ", MINOR = " + minor + 
+                    ", DEVPATH = " + devPath);
+            }
+            
+            // Is alsa device?
+            if (major.equals("116")) {
+                String devPathLower = devPath.toLowerCase();
+                
+                if ((devPathLower.contains("usb")) && (!devPathLower.contains("gadget")) && (devPathLower.endsWith("p"))) {
+                    // Get state (enabled/disabled)
+                    int state = (action.equals("add") ? 1 : 0);
+                    
+                    // Create data class
+                    UsbAudioData usbAudioData = new UsbAudioData(state, Character.toString(devName.charAt(8)), Character.toString(devName.charAt(10)));
+                    
+                    if(LOG) {
+                        Slog.v(WiredAccessoryManager.TAG, 
+                            "cardNumber = " + usbAudioData.cardNumber +
+                            ", deviceNumber = " + usbAudioData.deviceNumber +
+                            ", channels = " + Integer.toString(usbAudioData.channels));
+                    }
+                    
+                    // Notify applications that the audio output is going to change
+                    Intent noisyIntent = new Intent("android.media.AUDIO_BECOMING_NOISY");
+                    WiredAccessoryManager.this.mContext.sendBroadcast(noisyIntent);
+                    
+                    // Aquire wake lock before route change
+                    WiredAccessoryManager.this.mWakeLock.acquire();
+                    
+                    // Queue the route change
+                    this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(0, usbAudioData), 500);
+                }
+            }
+        }
+        
+        private final Handler mHandler = new Handler() {
+            public void handleMessage(Message message) {
+                UsbAudioData usbAudioData = (UsbAudioData)message.obj;
+                
+                // Send USB_AUDIO_ACCESSORY_PLUG intent to notify that an USB audio device has been connected.
+                Intent usbAudioIntent = new Intent("android.intent.action.USB_AUDIO_ACCESSORY_PLUG");
+                usbAudioIntent.putExtra("state", usbAudioData.state);
+                usbAudioIntent.putExtra("card", Integer.parseInt(usbAudioData.cardNumber));
+                usbAudioIntent.putExtra("device", Integer.parseInt(usbAudioData.deviceNumber));
+                usbAudioIntent.putExtra("channels", usbAudioData.channels);
+                
+                try {
+                    WiredAccessoryManager.this.mContext.sendStickyBroadcast(usbAudioIntent);
+                } catch(Exception e) {
+                    Slog.e(WiredAccessoryManager.TAG, "Unable to send intent: android.intent.action.USB_AUDIO_ACCESSORY_PLUG");
+                }
+                
+                // Route change complete, release the wake lock
+                WiredAccessoryManager.this.mWakeLock.release();
+            }
+        };
+        
+        final class UsbAudioData {
+            public int state;
+            public String cardNumber;
+            public String deviceNumber;
+            public int channels = 2;
+
+            public UsbAudioData(int state, String cardNumber, String deviceNumber) {
+                this.state = state;
+                this.cardNumber = cardNumber;
+                this.deviceNumber = deviceNumber;
+            }
+        };
+    };
 }
