diff --git a/system/vold/Android.mk b/system/vold/Android.mk
--- a/system/vold/Android.mk
+++ b/system/vold/Android.mk
@@ -14,6 +14,7 @@ common_src_files := \
	Ext4.cpp \
	Fat.cpp \
	Ntfs.cpp \
+        Exfat.cpp \
	Loop.cpp \
	Devmapper.cpp \
	ResponseCode.cpp \
	Xwarp.cpp \
	cryptfs.c
diff --git a/system/vold/Exfat.cpp b/system/vold/Exfat.cpp
--- a/system/vold/Exfat.cpp
+++ b/system/vold/Exfat.cpp
@@ -0,0 +1,88 @@
+#include <stdio.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+
+#include <linux/kdev_t.h>
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "Exfat.h"
+
+static char FSCK_EXFAT_PATH[] = "/system/bin/fsck.exfat";
+static char MK_EXFAT_PATH[] = "/system/bin/mkfs.exfat";
+static char MOUNT_EXFAT_PATH[]="/system/bin/mount.exfat";
+
+extern "C" int logwrap(int argc, const char **argv, int background);
+extern "C" int mount(const char *, const char *, const char *, unsigned long, const void *);
+
+int Exfat::check(const char *fsPath)
+{  
+	ALOGV("Exfat::check");
+	if (access(FSCK_EXFAT_PATH, X_OK)) {
+        ALOGW("Skipping fs checks\n");
+        return 0;
+    }
+
+    int rc = 0;
+
+    const char *args[5];
+    args[0] = FSCK_EXFAT_PATH;   
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = logwrap(2, args, 1);
+	if( rc != 0 )
+	{	
+       ALOGE("Filesystem check failed (unknown exit code %d)", rc);
+    }
+
+	return rc;
+}
+
+int Exfat::doMount(const char *fsPath, const char *mountPoint,
+                       bool ro, bool remount, bool executable,
+                       int ownerUid, int ownerGid, int permMask, bool createLost)
+{
+	int rc;
+    const char *args[11];
+    char mountData[255];
+
+    SLOGE("Exfat::doMount");
+    sprintf(mountData,
+            "locale=utf8,uid=%d,gid=%d,fmask=%o,dmask=%o,noatime,nodiratime",
+            ownerUid, ownerGid, permMask, permMask);
+
+    args[0] = MOUNT_EXFAT_PATH;
+    args[1] = fsPath;
+    args[2] = mountPoint;
+    args[3] = "-o";
+    args[4] = mountData;
+    args[5] = NULL;
+    rc = logwrap(5, args, 1);
+	if( rc !=0 )
+	{
+		ALOGE("Exfat::doMount error :", strerror(errno));
+	}
+
+    return rc;	
+}
+
+int Exfat::format(const char *fsPath, unsigned int numSectors)
+{
+	ALOGW("donnot support exfat format");
+	return 0;
+}
diff --git a/system/vold/Exfat.h b/system/vold/Exfat.h
--- a/system/vold/Exfat.h
+++ b/system/vold/Exfat.h
@@ -0,0 +1,16 @@
+#ifndef __EXFAT_H__
+#define __EXFAT_H__
+
+#include <unistd.h>
+
+class Exfat {
+public:
+    static int check(const char *fsPath);
+    static int doMount(const char *fsPath, const char *mountPoint,
+                       bool ro, bool remount, bool executable,
+                       int ownerUid, int ownerGid, int permMask,
+                       bool createLost);
+    static int format(const char *fsPath, unsigned int numSectors);
+};
+
+#endif
diff --git a/system/vold/Volume.cpp b/system/vold/Volume.cpp
--- a/system/vold/Volume.cpp
+++ b/system/vold/Volume.cpp
@@ -45,6 +45,7 @@
 #include "ResponseCode.h"
 #include "Fat.h"
 #include "Ntfs.h"
+#include "Exfat.h"
 #include "Process.h"
 #include "cryptfs.h"

@@ -440,7 +441,7 @@ int Volume::mountVol() {

         errno = 0;
         setState(Volume::State_Checking);
-
+#if 0
         bool isFatFs = true;
         if (Fat::check(devicePath)) {
             if (errno == ENODATA) {
@@ -454,7 +455,7 @@ int Volume::mountVol() {
                 return -1;
             }
         }
-
+#endif
         /*
          * Mount the device on our internal staging mountpoint so we can
          * muck with it before exposing it to non priviledged users.
@@ -466,19 +467,36 @@ int Volume::mountVol() {
         // prevented users from writing to it. We don't want that.
         gid = AID_SDCARD_RW;

-        if (isFatFs) {
-            if (Fat::doMount(devicePath, "/mnt/secure/staging", false, false, false,
-                    AID_SYSTEM, gid, 0702, true)) {
-                SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));
-                continue;
-            }
-        } else {
-            if (Ntfs::doMount(devicePath, "/mnt/secure/staging", false, false, false,
-                    AID_SYSTEM, gid, 0702, true)) {
-                SLOGE("%s failed to mount via NTFS (%s)\n", devicePath, strerror(errno));
-                continue;
-            }
-        }
+        if( !Exfat::check(devicePath) )	
+              {	
+                  if( Exfat::doMount(devicePath, "/mnt/secure/staging", false, false, false, AID_SYSTEM, gid, 0702, true) )	
+                  {	
+                        SLOGE("%s failed to mount via ExFat (%s)\n", devicePath, strerror(errno));	
+                        continue;	
+                  }	
+            }	
+      else if( !Fat::check(devicePath))	
+            {	
+                 if( Fat::doMount(devicePath, "/mnt/secure/staging", false, false, false, AID_SYSTEM, gid, 0702, true) )	
+                 {	
+                      SLOGE("%s failed to mount via VFAT (%s)\n", devicePath, strerror(errno));	
+                      continue;	
+                 }	
+            }	
+      else if( !Ntfs::check(devicePath))	
+            {	
+                  if( Ntfs::doMount(devicePath, "/mnt/secure/staging", false, false, false, AID_SYSTEM, gid, 0702, true) )	
+                  {	
+                        SLOGE("%s failed to mount via NTFS (%s)\n", devicePath, strerror(errno));	
+                        continue;	
+                  }	
+            }	
+      else	
+            {	
+                  SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));	
+                  setState(Volume::State_Idle);	
+                  continue;	
+      }

         SLOGI("Device %s, target %s mounted @ /mnt/secure/staging", devicePath, getMountpoint());
